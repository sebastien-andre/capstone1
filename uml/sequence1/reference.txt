

# how can someone login offline? save login info as well
# check internet connection before sending to webservice (or if sending to webservice returns error, store in local and try every 5 mins to upload (how to start subprocess that will loop in background ever 5 mins) )
# add sequence for reserving a spot for student & tutors 


from plantuml import PlantUML

# Define the PlantUML server 
plantuml = PlantUML(url='http://www.plantuml.com/plantuml/img/')

# Define UML diagrams as strings
student_view = """
@startuml
hide footbox
<style>
root {
  LineColor black
  Shadowing 0
}
sequenceDiagram {
  participant {
    BackGroundColor white
    LineThickness 1
  }
  group {
    LineThickness 1
    LineColor maroon
    LineStyle 3
    padding 50
    margin 50
  }
  groupHeader {
    FontStyle plain
    BackGroundColor pink
    LineColor maroon
    LineStyle 3
    padding 10
    margin 10
  }
}
</style>



title Student View - Login, Reservation, and QR Code Scanning



actor "Student" as s
boundary "GUI/App (Boundary)" as gui
control "Webservice (Control)" as ws
database "Online Database" as db
database "Local Storage" as ls



' Appointment scheduling block

activate s
s -> gui: Enter login credentials
activate gui
gui -> ls: Check credentials
activate ls
deactivate ls
gui --> s: Display login success/failure
deactivate gui
deactivate s




||60||

' Appointment scheduling block
opt Scheduling Appointment
    s -> gui: Select scheduling
    activate s
    activate gui
    gui -> ws: Check internet connectivity
    activate ws
    deactivate ws
    alt Connected to Network

        gui -> ws: Request up-to-date schedule
        activate ws
        ws -> db: Query up-to-date schedule
        activate db
        deactivate db
        ws -> gui: Return up-to-date schedule
        deactivate ws
        gui -> s: Display up-to-date schedule
        s -> gui: Select appointment
        gui --> s: Ask for confirmation
        s -> gui: Confirm signup
        gui -> ws: Request booking
        activate ws
        ws -> db: Check for booking
        activate db
        deactivate db
        alt Appointment Available
            ws --> db: Mark appointment booked
            activate db
            deactivate db
            ws --> gui: Signup success
            gui -> ls: Mark appointment booked locally
            activate ls
            deactivate ls
            gui --> s: Display signup success

        else Appointment Booked
            ws --> gui: Appointment unavailable
            deactivate ws
            gui --> s: Display appointment unavailable

        end 

        
    else Not Connected
        gui --> s: Check network connection error, retrying in 5 mins
        loop every 5 minutes
            gui -> ws: Check internet connectivity
            activate ws
            deactivate ws
            deactivate s
        end
        gui -> ls: Get key for validity check and run connected to network alt
        activate ls
        deactivate ls
        deactivate s
        deactivate gui
    end
end



||60||


' QR code scanning block
opt QR Code Scanning
    s -> gui: Select QR scanner
    activate s
    activate gui
    gui --> s: Enter camera view
    s -> gui: Scan QR code
    gui -> ws: Check internet connectivity
    activate ws
    deactivate ws
    alt Connected to Network
        gui -> ws: Send QR code details to webservice
        activate ws
        ws -> db: Validate and mark QR code as used
        activate db
        deactivate db
        alt Invalid Code
            ws -> gui: Return error
            gui --> s: Display invalid code/not signed up for session
        end

        gui -> ws: Request new set of valid codes
        ws -> db: Request new set of valid codes
        activate db
        deactivate db
        ws --> gui: Return new set of valid codes
        deactivate ws
        gui -> ls: Update set of valid codes
        activate ls
        deactivate ls
    else Not Connected
        gui --> s: Check network connection error, retrying in 5 mins
        gui -> ls: Store code in local until reconnected
        activate ls
        deactivate ls
        loop every 5 minutes
            gui -> ws: Check internet connectivity
            activate ws
            deactivate ws
        end
        gui -> ls: Get key for validity check and run connected to network alt
        activate ls
        deactivate ls
        deactivate s
        deactivate gui
    end
end
@enduml
"""


# Function to save UML code to text file and generate PNG
def save_and_generate(uml_code, file_name):
    # Write the UML code to a .txt file
    txt_file_name = f"{file_name}.txt"
    with open(txt_file_name, 'w') as file:
        file.write(uml_code)
    print(f"Saved UML to {txt_file_name}")
    
    # Generate the PNG file using PlantUML
    try:
        plantuml.processes_file(txt_file_name)
        print(f"Generated diagram {file_name}.png")
    except Exception as e:
        print(f"Error generating diagram: {e}")

# Save and generate diagrams for each view
save_and_generate(student_view, 'student_view')
save_and_generate(tutor_view, 'tutor_view')
save_and_generate(administrator_view, 'administrator_view')








from plantuml import PlantUML

# Define the PlantUML server 
plantuml = PlantUML(url='http://www.plantuml.com/plantuml/img/')

# Define UML diagrams as strings
student_view = """
@startuml
hide footbox
<style>
root {
  LineColor black
  Shadowing 0
}
sequenceDiagram {
  participant {
    BackGroundColor white
    LineThickness 1
  }
  group {
    LineThickness 1
    LineColor maroon
    LineStyle 3
    padding 50
    margin 50
  }
  groupHeader {
    FontStyle plain
    BackGroundColor pink
    LineColor maroon
    LineStyle 3
    padding 10
    margin 10
  }
}
</style>



title Student View - Reservation



actor "Student" as s
boundary "GUI/App (Boundary)" as gui
control "Webservice (Control)" as ws
database "Online Database" as db
database "Local Storage" as ls


s -> gui: Select scheduling
activate s
activate gui
gui -> ws: Check internet connectivity
activate ws
deactivate ws
alt Connected to Network

    gui -> ws: Request up-to-date schedule
    activate ws
    ws -> db: Query up-to-date schedule
    activate db
    deactivate db
    ws --> gui: Return up-to-date schedule
    deactivate ws
    gui --> s: Display up-to-date schedule
    s -> gui: Select appointment
    gui --> s: Ask for confirmation
    s -> gui: Confirm signup
    gui -> ws: Request booking
    activate ws
    ws -> db: Check for booking
    activate db
    deactivate db
    alt Appointment Available
        ws --> db: Mark appointment booked
        activate db
        deactivate db
        ws --> gui: Signup success
        deactivate ws
        gui -> ls: Mark appointment booked locally
        activate ls
        deactivate ls
        gui --> s: Display signup success
        deactivate gui

    else Appointment Booked
        ws --> gui: Appointment unavailable
        activate gui
        activate ws
        deactivate ws
        gui --> s: Display appointment unavailable
        activate s 
        deactivate s
        deactivate gui

    end 

    
else Not Connected
    gui --> s: Check network connection error, retrying in 5 mins
    loop every 5 minutes
        gui -> ws: Check internet connectivity
        activate ws
        deactivate ws
    end
    gui -> ls: Get key for validity check and run connected to network alt
    activate ls
    deactivate ls

    deactivate gui
end


@enduml

"""


# Function to save UML code to text file and generate PNG
def save_and_generate(uml_code, file_name):
    # Write the UML code to a .txt file
    txt_file_name = f"{file_name}.txt"
    with open(txt_file_name, 'w') as file:
        file.write(uml_code)
    print(f"Saved UML to {txt_file_name}")
    
    # Generate the PNG file using PlantUML
    try:
        plantuml.processes_file(txt_file_name)
        print(f"Generated diagram {file_name}.png")
    except Exception as e:
        print(f"Error generating diagram: {e}")

# Save and generate diagrams for each view
save_and_generate(student_view, 'student_schedule_appt')








